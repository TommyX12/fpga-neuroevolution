

floating point arithmetic with 'real' datatype


standardized datapath access
    start signal to datapath
    finished signal from datapath
    instruction to datapath
        32 bit standardized instruction for doing anything, such as memory read, write, write to screen, etc.
        lowest [3:0] bits: opcode: determines operation to use.
            0: do nothing.
            1: draw to frame buffer.
                bit [11:4]: x
                bit [18:12]: y
                bit [21:19]: color
                bit 22: plot
                
            2: read from memory
                bit [19:4]: address
                
            3: write to memory
                bit [19:4]: address
                bit [31:20]: value
                
            4: output frame buffer
                bit [11:4]: x
                bit [18:12]: y
                
            5: read from memory for neural net
                bit [9:4]: address
                
            6: write to memory for neural net
                bit [9:4]: address
                
            7:
            8: 
            9: 
            10: 
            11: 
            12: 
            13: 
            14: 
            15: 
    
    return value from datapath
        32 bit value corresponding to each possible operation in the instruction to datapath

datapath multiplexer for concurrent access control.
    generate for arbitrary number of inputs.
    multiplex each of the 4 standard signals for datapath access, for each input.
    scan for an input that has unfinished instruction. pass its instructions to datapath and wait for output, then put that into the corresponding output to that input and set finished for it. repeat.
    
    !!! this is essential so make sure this is actually working.
    
// !!! make a frame buffer that act the same as vga adapter but is just a memory. all draw now draw to frame buffer, and final step draw from frame buffer to screen.

!!! use numerous memory locator macro to find where memory are suppose to be stored.
    !!! let Ian do this

!!! random number generator
    ? available as datapath operation, or simply connection.
    
    module random (clock, resetn, data);
        parameter bits;
        
        input clock;
        input resetn;
        
        output reg data;
        
        // TODO add your stuff here
    
    endmodule;

structs:
    ant:
        x, y, current fitness
    
    food:
        x, y
        
    poison:
        x, y
    
    neural network weights are stored in ant update module locally.

!!! note:
    GA update stores all weights of the neural network.
    and each ant module connects to one of them.
    GA also stores a copy buffer, used in copying.
    
    make sure to use advanced physical optimization on final compilation.
    
    !!! current debug measures:
        // background drawing neural net
        // evolve jump over states that resets neural net
        // datapath NNMEMREAD delay = 10
        NN input are set to random
        ant move to food instead of using neural net
    
    potential future optimizations:
        datapath router can be more efficiently designed in hardware.
        !!! reduce complexity by using just food. have all food below a certain ID to become poison
    
    
    !!! make sure memory can store all weights in neural network.
    
    !!! solve the bug of ants being drawn on the right side of screen when on the left. maybe a buffer offset problem.
    
    !!! add initial block that does standard reset for fsm template.
    
    !!! make sure to account for screen size when randomizing (especially in ant), do not go out of bound
    
    !!! use slicing operator, NOT shift, to access part of array.
    
    // !!! reduce clock cycle, reduce number of DSP blocks, reduce number of indexed access (maybe try using dedicated memory blocks instead, or an array of blocks similar to how neurons do it, each block does its stuff)
    
    // !!! combine all drawing modules to a single one, to save space for parallelized update modules.
    
    // !!! let datapath perform buffer flipping so save the fbdisp module
    
    !!! when accelerating: disable drawing altogether.
    
    !!! current plan:
        // use verilog multi-dimensional array access everywhere
        try hardware acceleration for distance calculation of food (requires parallel storage of data) etc, and become a special operation call in datapath.
        // use dedicated ram module with largest bit width possible to store neural network weights, and main module will load them into ant update modules.
        can have dual ant update modules that achieve partial parallelization.
        if all else fails, fall back to standard FSM design (next_state etc).
        
        make sure neural network execution wait for long enough (at least one clock edge), or buffer the input such that they do not partially change to food that are not closest.

main loop:
    // logic
    GA update
        if generation timer is not 30 seconds yet, finish immediately.
        otherwise increase generation timer by 1.
            
        if it's the first generation
            randomize all ant, food, poison location
            randomize the neural network weights.
        
        else:
            for each ant:
                // perform roulette wheel selection to find parent ant.
                // try the following in a single cycle.
                get rand = random number.
                sum = 0
                id = 0
                for each ant:
                    if rand >= sum and rand < sum + ant.fitness:
                        id = current id
                    
                    sum += ant.fitness
                
                copy parent weight to buffer[ant id] weight.
                
            apply mutation to each weight in the buffer.
                // might need multiple cycles
                
            copy buffer weight to main weights.
        
        finally:
            set generation timer = 0.
            set foot eaten, poison eaten, current fitness to 0.
        
    ant update (parallel for each ant)
        test if food collide.
            if yes, change food to another random location, update current fitness.
            in the same step, retrieve closest food location into a register.
                
        test if poison collide.
            if yes, change poison to another random location, update current fitness.
            in the same step, retrieve closest poison location into a register.
        
        run neural network
            fixed point arithmetic: multiply and shift.
            use 8 bits operands which actually represents xxxx.xxxx
            input:
                food x to the left
                food x to the right
                food y to the left
                food y to the right
                poison x to the left
                poison x to the right
                poison y to the left
                poison y to the right
            
            output:
                move left
                move right
                move up
                move down
            
        move depending on output
        
        !!! note:
        this module stores all connections of the neural network
        
    // drawing
    background draw
    ant draw
    food draw
    poison draw
    output frame buffer
    
    // fps control
    limit fps
